---
layout: post
title:  "How to organize and build your GDNative project with CMake and MinGW in 2k21"
date:   2021-06-24 11:43:24 +0300
categories: godot gdnative cpp
---

This a tutorial / memo for myself how to setup GDNative and godot-cpp with CMake and MinGW in June 2021. When you just have to follow instructions, this setup is easy. But for now all the tutorial repos are out of date, confusing ```godot-headers``` with ```godot_headers``` and something like that.

I prefer CMake to SCons because it's more widespread (In reality I hate all of the C++ build tools but the build process is even less fun without them). More widespread means that more of the external libraries use it.

## Step 0: setup your tools

You will need to download and install before the start (all x64 versions):

1. [Git](https://git-scm.com/downloads)
2. [Python](https://www.python.org/downloads/)
3. [MinGW](http://mingw-w64.org/doku.php/download/mingw-builds)
4. [CMake](https://cmake.org/download/)
5. [Godot](https://godotengine.org/download)

All of the above should be searchable in your path. I believe in 2021 all the installers add themselves to the PATH, except for Godot, which is distributed as a single binary, which is certainly cool. But we still have to add it to the PATH variable so that Godot_v3.3.2-stable_win64.exe would be callable from anywhere. 

Also as a terminal emulator on Windows I use [Cmder](https://cmder.net/) and I like it.

## Step 1: organize your project

To make life more interesting let's go with some unorthodox project structure:

<pre>
<b>/export/</b>                   //game binaries built with godot
<b>/lib/godot-cpp</b>
<b>/lib/cpp_dependency1</b>
<b>/lib/cpp_dependency2</b>
<b>/native/</b>                   //c++ sources
<b>/native/world</b>              //our world generation native library
<b>/godot</b>                     //godot sources
<b>/godot/native</b>              //gdnative godot libraries
<b>/godot/native/world</b>        //gdnative godot files (.gdns and .gdnlib)
<b>/godot/native/lib</b>          //compiled gdnative libraries and dependencies
<b>build.py</b>                   //simple build script for godot project
<b>.gitignore</b>
</pre>

## Step 2: setup git repository


* Init repo 

    ```bash
git init
    ```
* Create file named ".gitgnore"
<details>
<summary>.gitgnore</summary>
<pre><code># VSCode specific
*.vscode/*

# C++
lib/*
native/*/build/*

# Godot-specific ignores
logs/
.import/
godot/.import/
godot/export.cfg
godot/export_presets.cfg
*.translation
godot/addons/*
godot/logs/*
godot/native/lib/*
*.lnk

# Export
export/*
</code></pre>
</details>


* Add and commit .gitgnore to git:

    ```bash
git add . && git commit -m "added gitgnore"
    ```

## Step 3: building godot-cpp dependency 

* Clone and build godot-cpp dependency to our **lib/** subdirectory
    * ```bash
cd lib
    ```
    * ```bash
git submodule add https://github.com/godotengine/godot-cpp
    ```
    * ```bash
git submodule update --init --recursive
    ```
    this adds [https://github.com/godotengine/gpdot-headers](https://github.com/godotengine/gpdot-headers) dependency
    * ```bash
mkdir godot-cpp\build\win64\debug && cd godot-cpp\build\win64\debug
    ```
    * ```bash
cmake ../../.. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DBITS=64
    ```
    * ```bash
cmake --build . -- -j4
    ```
* {:.continue_list}Test GDNative with a test project provided with ```godot-cpp```
    * Navigate to **godot-cpp/test/**
    ```bash
cd ../../../test
    ```
    * {:.continue_list}Build the object file from provided **init.cpp**
    ```bash
g++ -fPIC -o src/init.o -c src/init.cpp -g -O3 -std=c++14 -I../include -I../include/core -I../build/win64/debug/include/gen -I../godot-headers
    ```
    First, notice that tutorials sometimes use godot_headers instead of godot-headers since that how it used to be named. Second, **-I../build/win64/debug/include/gen** is used instead of **-I../include/gen** the second one is where the bindings are generated if you use SCons and what is mentioned in all the tutorials, but CMake in godot-cpp repo generates bindings in the first path. **Possible errors**:
        * ```init.cpp:1:10: fatal error: Godot.hpp: No such file or directory``` - Sorry, I don’t remember what it was. Must be the wrong path to the lib\godot-cpp\include\core\Godot.hpp passed here -I../include/core
        * ```gdnative_api_struct.gen.h not found``` - godot-headers repo is not found in godot-cpp. It was first named godot_headers, not godot-headers so older manuals have this error
        * ```...Reference.hpp not found...``` - the Godot bindings headers have not been found in ../build/win64/release_shared/include/gen These bindings are autogenerated by CMake when you build godot-cpp on step 3. However if you use SCons for building it, they are generated in the ../include/gen and all manuals mention this directory
    * {:.continue_list}Link it with our gdnative and c++ runtime libraries 
    ```bash
g++ -o libgdexample.dll -shared src/init.o -static -static-libgcc -static-libstdc++ -L../bin/ -lgodot-cpp.windows.debug.64
    ```
    **Possible errors:**
        * ```Error: Can’t open dynamic library platform/windows/os.windows.cpp``` - **libgodot-cpp.windows.debug.64.dll** is not found in the **../bin/** directory
    * {:.continue_list}Run the test godot project 
    ```
Godot_v3.3.2-stable_win64.exe -s script.gd
    ```
    (Godot_v3.3.2-stable_win64.exe should be in the PATH or provide full path to it). 
    If everything is fine you will see that Godot ran script.gd and saw our GDNative library: 
    ```
Native Script [NativeScript:1183]
Library [GDNativeLibrary:1181]
Reference [Reference:1185]
Reference name SimpleClass
Reference value 0
Call method 1
    ```

        **Possible errors:**

        * ```ERROR: Can't open dynamic library: C:/Users/user/Documents/sailing_west/lib/godot-cpp/test/lib/libgdexample.dll, error: Error 126``` - Godot can’t find your compiled dll. Check the path in **gdexample.gnlib** in **Windows.64=** parameter of section **[entry]** and if it contains the correct path to your library

<!-- * Step 5.d:
    * ```Error: Can’t open dynamic library platform/windows/os.windows.cpp``` - .dlls from the step 5.a.ii are not found in the /test/ directory -->


## Compile godot-cpp as a release library
Debug library is cool for debugging, but it’s unoptimised and has a lot of bloat (it’s ~130Mb large). Who needs debugging anyway? (jokes aside, you probably wouldn’t want to debug Godot itself. Oh wait, you may have to)
From now on I will skip navigation part (especially back to the project root)
mkdir godot-cpp\build\win64\release && cd godot-cpp\build\win64\release
Modify the CMakeLists.txt in /lib/godot/src. Disable debug information in the builds so the Godot library build would be not 130Mb, but 5Mb. On line 110 replace:
set(GODOT_COMPILE_FLAGS "-fPIC -g -Wwrite-strings")
with:
set(GODOT_COMPILE_FLAGS "-fPIC -Wwrite-strings")
cmake ../../.. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DBITS=64 -DCMAKE_BUILD_TYPE=Release
cmake --build . -- -j4

## Compile godot-cpp as a shared .dll library
Why would you do it? If you want to make several modules, statically linking with godot-cpp would mean it’s copied into every library you build. On the downside, you’ll have to distribute not a single gdnative .dll, but several .dll files alongside with it. But you still are distributing your .dll separately from your executable, so why not?

Modify the CMakeLists.txt in /lib/godot/src. On line 172 replace:
add_library(${PROJECT_NAME} 
with:
add_library(${PROJECT_NAME} SHARED
cmake ../../.. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DBITS=64 -DCMAKE_BUILD_TYPE=Release
cmake --build . -- -j4
Test GDNative as a dynamic library with a provided test project
Copy all .dll dependencies to the /test folder
our godot-cpp library libgodot-cpp.windows.release.64.dll
gcc runtime dlls for mingw32 from mingw32 /bin folder
libstdc++-6.dll
libgcc_s_seh-1.dll
libwinpthread-1.dll (to use threads possibly)
cd ../../../test 
g++ -fPIC -o src/init.o -c src/init.cpp -O3 -std=c++14 -I../include -I../include/core -I../build/win64/release/include/gen -I../godot-headers
g++ -o libgdexample.dll -shared src/init.o -L. -lgodot-cpp.windows.release.64
Godot_v3.3.2-stable_win64.exe -s script.gd (Godot_v3.3.2-stable_win64.exe should be in the PATH)

Now our Godot library is only 72kb in size with additional dlls of around 7Mb.
### Possible errors:
Step 5.c: 
“init.cpp:1:10: fatal error: Godot.hpp: No such file or directory” - Sorry, I don’t remember what it was. Must be the wrong path to the lib\godot-cpp\include\core\Godot.hpp passed here -I../include/core
“gdnative_api_struct.gen.h not found” - godot-headers repo is not found in godot-cpp. It was first named godot_headers, not godot-headers so older manuals have this error
“...Reference.hpp not found...” - the Godot bindings headers have not been found in ../build/win64/release_shared/include/gen These bindings are autogenerated by CMake when you build godot-cpp on step 3. However if you use SCons for building it, they are generated in the ../include/gen and all manuals mention this directory
Step 5.d:
 “Error: Can’t open dynamic library platform/windows/os.windows.cpp” - .dlls from the step 5.a.ii are not found in the /test/ directory
Step 5.e:
 “ERROR: Can't open dynamic library: C:/Users/user/Documents/sailing_west/lib/godot-cpp/test/lib/libgdexample.dll, error: Error 126 …” -
Either Godot can not find your compiled dll. Check the path in gdexample.gnlib in the section [entry] under parameter Windows.64= and if that path contains your compiled .dll
Or one of the dll dependencies mentioned in 5.a is absent. They should be in the same directory with your compiled library .dll.

## Creating your own GDNative project
Now we can move on to setting up our first library project
Copy your mingw standard library dlls (libstdc++-6.dll, libgcc_s_seh-1.dll, libwinpthread-1.dll) into /lib/std - just to have them among dependencies explicitly
cd native/
mkdir world_generator && mkdir world_generator\src && cd world_generator
Copy init.cpp to gdnative/world_generator/src
Create CMakeLists.txt
cmake_minimum_required(VERSION 3.16)
project(world VERSION 0.1.0)
 
set(CMAKE_CXX_STANDARD 17)
 
if(CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE Release)
endif()
 
 
string(TOLOWER "${CMAKE_SYSTEM_NAME}" SYSTEM_NAME)
string(TOLOWER "${CMAKE_BUILD_TYPE}" BUILD_TYPE)
set(MY_SYSTEM_NAME "win64")
 
set(BUILD_PATH ${CMAKE_SOURCE_DIR}/../../godot/native/lib/${MY_SYSTEM_NAME})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${BUILD_PATH}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${BUILD_PATH}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${BUILD_PATH}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${BUILD_PATH}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${BUILD_PATH}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${BUILD_PATH}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${BUILD_PATH}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${BUILD_PATH}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${BUILD_PATH}")
 
set(MY_LINKER_FLAGS "-Wl,-R,'$$ORIGIN'")
set(MY_COMPILER_FLAGS "-fPIC -Wwrite-strings")
set(LINK_DIRS )
 
add_library(${PROJECT_NAME} SHARED src/init.cpp)
 
file(REMOVE_RECURSE ${BUILD_PATH})
file(MAKE_DIRECTORY  ${BUILD_PATH})
 
if(CMAKE_BUILD_TYPE MATCHES Release)
    add_definitions(-DNDEBUG)
    add_custom_command(TARGET ${PROJECT_NAME} PRE_LINK
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/../../lib/std/ ${BUILD_PATH})
    add_custom_command(TARGET ${PROJECT_NAME} PRE_LINK
        COMMAND ${CMAKE_COMMAND} -E copy
        ${CMAKE_SOURCE_DIR}/../../lib/godot-cpp/bin/libgodot-cpp.${SYSTEM_NAME}.${BUILD_TYPE}.64.dll ${BUILD_PATH})
    set(LINK_DIRS "${BUILD_PATH}")
else()
    add_definitions(-D_DEBUG)
    set(COMPILER_FLAGS "-g")
    set(LINKER_FLAGS "-static -static-libgcc -static-libstdc++")
    set(LINK_DIRS ${CMAKE_SOURCE_DIR}/../../lib/godot-cpp/bin/)
endif(CMAKE_BUILD_TYPE MATCHES Release)
 
target_include_directories(${PROJECT_NAME} PUBLIC
    ../../lib/godot-cpp/godot-headers
    ../../lib/godot-cpp/include
    ../../lib/godot-cpp/include/core
    ../../lib/godot-cpp/build/win64/release/include/gen
)
 
set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY COMPILE_FLAGS ${COMPILER_FLAGS})
set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY LINK_FLAGS ${LINKER_FLAGS})
 
target_link_directories(${PROJECT_NAME} PRIVATE ${LINK_DIRS})
target_link_libraries(${PROJECT_NAME} PRIVATE "godot-cpp.${SYSTEM_NAME}.${BUILD_TYPE}.64")
 

Build 
debug statically linked “self-contained” library when you want to debug
mkdir build/win64/debug && cd build/win64/debug
cmake ../../.. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_SYSTEM_NAME=Windows
cmake --build . -- -j4

OR release dynamically linked library when you want to release
cd ../
mkdir release && cd release
cmake ../../.. -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_NAME=Windows
cmake --build . -- -j4
Test with Godot by 
copying sample project to the /godot/
Replacing Windows.64="gdexample.dll" to Windows.64="res://lib/win64/libworld_generator.dll" in gdexample.gnlib in the section [entry] 

Possible errors:
On steps 6.a.iii or 6.b.iv: 
“cannot open output file ...\godot\native\lib\win64\libworld.dll: Permission denied”  When rewriting the library dll if the Godot editor is open it can block the dll writing


## Adding another library, SFML
Download SFML prebuilt dlls. https://www.sfml-dev.org/download/sfml/2.5.1/ for GCC 7.3.0 MinGW (SEH) - 64-bit
(Or we can build SFML yourself from https://github.com/SFML/SFML )
Modify CMakelists.txt, 
Add at line 30
set(SFML_DIR ${CMAKE_SOURCE_DIR}/../../lib/SFML-2.5.1/lib/cmake/SFML/)
find_package(SFML REQUIRED graphics window system)
Replace the last line with 
target_link_libraries(${PROJECT_NAME} PRIVATE "godot-cpp.${SYSTEM_NAME}.${BUILD_TYPE}.64" sfml-graphics sfml-window sfml-system)
Modify init.hpp, add lines (guess where)
#include <SFML\Graphics.hpp>
void test_sfml() {
        Godot::print("Testing SFML");
        sf::Vector2f test_vector = sf::Vector2f(224, 15);
        Godot::print(godot::String::num_real(test_vector.x));
}
register_method("test_sfml", &SimpleClass::test_sfml);
Modify script.gd in /godot/, add ref.test_sfml() in the _initialize() function
Build your library in either debug or release version and run Godot_v3.3.2-stable_win64.exe -s script.gd again

Now it kinda works, but I fear, that CMake dos not either statically link sfml dlls or includes them in the distribution, so we’ll have to move from find_package

## Exporting godot project
Godot exporter will copy it’s GDNative libraries while exporting, but won’t copy ours. What can be done here. For me the simplest way is to create python build scripts. You can use any CI tool for that matter.
Let’s create build.py in the root folder which will export our game with all it’s dll dependencies. This code uses robocopy windows utility
import configparser
 
GODOT33 = "Godot_v3.3-stable_win64.exe"
EXPORT_PATH = "export"
WIN_BUILD_PATH = '%s/win64' % EXPORT_PATH
APP_NAME = 'Native_project'
 
WIN_PARAMS = {"godot": GODOT33, "godot_params": "--no-window --export",  "path": "../" + EXPORT_PATH, "build_path": "../" + WIN_BUILD_PATH, "app_name": APP_NAME, "binary": "%s.exe" % APP_NAME}
 
 
def update_godot_export_templates():
    export_config = configparser.ConfigParser()
    export_config.read("godot/export_presets.cfg")
    PRESETS = [{"name": "preset.0", "export_path": WIN_PARAMS["build_path"] + "/" + WIN_PARAMS["binary"]}]
    for preset in PRESETS:
        export_config[preset["name"]]["export_path"] = '"%s"' % preset["export_path"]     
    with open('godot/export_presets.cfg', 'w') as configfile:
        export_config.write(configfile, space_around_delimiters=False)
 
 
import os
if __name__ == "__main__":
    os.system("cd godot && Godot_v3.3-stable_win64.exe --no-window --export-debug \"Windows Desktop\" ../export/win64/Native_project.exe && cd ..")
    os.system("robocopy godot/native/lib/win64 export/win64 *.dll")
 
python build.py
Now you can run your game and test 
cd export/win64 
Native_project.exe
At this point you should see your project running
